---
description:
globs: *
alwaysApply: false
---
# 開發指南

## 程式碼風格規範

### Python 程式碼風格

1. **命名慣例**:
   - 類別名稱使用 `PascalCase`
   - 函數和變數使用 `snake_case`
   - 常數使用 `ALL_CAPS`
   - 私有方法和變數以單下劃線開頭 `_private_method`

2. **文檔字串**:
   - 所有模組、類別和函數都應有文檔字串
   - 使用多行文檔字串格式 `"""..."""`
   - 包含參數說明、返回值和異常說明

3. **導入順序**:
   - 標準庫
   - 第三方庫
   - 本地應用/庫

### JavaScript 程式碼風格

1. **命名慣例**:
   - 變數和函數使用 `camelCase`
   - 類別和組件使用 `PascalCase`
   - 常數使用 `ALL_CAPS`

2. **註解規範**:
   - 使用 `//` 進行單行註解
   - 使用 `/* ... */` 進行多行註解
   - 關鍵邏輯需加註解說明

## 提交指南

1. **提交訊息格式**:
   ```
   <類型>: <簡短描述>

   <詳細描述>
   ```

2. **提交類型**:
   - `feat`: 新功能
   - `fix`: 錯誤修復
   - `docs`: 文檔更新
   - `style`: 不影響程式碼邏輯的格式變更
   - `refactor`: 程式碼重構
   - `test`: 添加或修改測試用例
   - `chore`: 維護性工作

## 文件結構規範

- 每個檔案頂部都要加上詳細的註解
- 所有檔案使用 UTF-8 編碼
- 所有文本檔案以換行符結尾

## 最佳實踐

1. **錯誤處理**:
   - 使用明確的錯誤代碼和訊息
   - 在合適的層級處理異常
   - 記錄錯誤詳情以便調試

2. **安全性**:
   - 不在程式碼中硬編碼敏感資訊
   - 使用參數化查詢防止 SQL 注入
   - 驗證所有用戶輸入

3. **測試**:
   - 為主要功能編寫單元測試
   - 針對關鍵流程編寫集成測試
   - 測試覆蓋率目標 > 80%
