---
description:
globs: *
alwaysApply: false
---
# Streamlit 開發指南

## 程式碼風格規範

### Python 程式碼風格

1. **命名慣例**:
   - 類別名稱使用 `PascalCase`
   - 函數和變數使用 `snake_case`
   - 常數使用 `ALL_CAPS`
   - 私有方法和變數以單下劃線開頭 `_private_method`

2. **文檔字串**:
   - 所有模組、類別和函數都應有文檔字串
   - 使用多行文檔字串格式 `"""..."""`
   - 包含參數說明、返回值和異常說明

3. **導入順序**:
   - 標準庫
   - 第三方庫 (streamlit, pandas, plotly, pydantic)
   - 本地應用/庫

### Streamlit 特定規範

1. **頁面結構**:
   - 使用 `st.set_page_config()` 配置頁面基本設定
   - 合理使用 `st.sidebar` 進行導航設計
   - 適當使用 `st.columns()` 進行響應式佈局

2. **狀態管理**:
   - 使用 `st.session_state` 管理應用狀態
   - 避免不必要的頁面重新載入
   - 合理使用 `st.rerun()` 進行數據更新

3. **用戶界面設計**:
   - 使用有意義的 emoji 和圖標提升用戶體驗
   - 提供清晰的用戶反饋 (`st.success`, `st.error`, `st.info`, `st.warning`)
   - 保持一致的視覺風格和交互模式

## 提交指南

1. **提交訊息格式**:
   ```
   <類型>: <簡短描述>

   <詳細描述>
   ```

2. **提交類型**:
   - `feat`: 新功能
   - `fix`: 錯誤修復
   - `docs`: 文檔更新
   - `style`: 不影響程式碼邏輯的格式變更
   - `refactor`: 程式碼重構
   - `test`: 添加或修改測試用例
   - `chore`: 維護性工作

## 文件結構規範

- 所有檔案使用 UTF-8 編碼
- Python 檔案頂部加上詳細的模組說明註解
- 使用有意義的函數和變數命名
- 保持適當的程式碼縮排和空行

## Streamlit 最佳實踐

1. **性能優化**:
   - 使用 `@st.cache_data` 快取數據載入操作
   - 避免在每次頁面重新載入時執行昂貴的計算
   - 合理管理大量數據的載入和顯示

2. **用戶體驗**:
   - 提供載入指示器 (`st.spinner`)
   - 使用進度條顯示長時間操作的進度
   - 確保錯誤訊息清晰易懂

3. **程式碼組織**:
   - 將相關功能組織成函數或類別
   - 使用模組化設計，便於維護和擴展
   - 保持主程式邏輯的簡潔性

## 數據管理規範

1. **數據驗證**:
   - 使用 Pydantic 模型進行數據驗證
   - 確保所有用戶輸入都經過適當驗證
   - 處理數據載入和保存過程中的異常情況

2. **檔案操作**:
   - 使用適當的異常處理機制
   - 確保數據文件的備份和恢復功能
   - 驗證 JSON 數據的完整性和格式正確性

## 測試策略

1. **功能測試**:
   - 測試所有核心功能的正確性
   - 驗證數據持久化和同步機制
   - 確保用戶界面的響應性和穩定性

2. **數據測試**:
   - 驗證數據模型的正確性和一致性
   - 測試邊界條件和異常情況的處理
   - 確保數據操作的原子性和一致性
